{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1pIiQmTRc-4NphQyUq_-wc7y_r_L2mc8u","timestamp":1722497021007}],"authorship_tag":"ABX9TyONSk+UyLyL+lRRKm+HdJnR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install streamlit\n","!pip install pyngrok\n","!pip install ultralytics\n","!pip install tensorflow==2.15.0"],"metadata":{"collapsed":true,"id":"FNhkJah3m-mj"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Fvhl_X-pmbZE"},"outputs":[],"source":["import streamlit as st\n","import cv2\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from ultralytics import YOLO\n","import os\n","from google.colab import drive\n","import time\n","\n","# Google Drive 마운트\n","drive.mount('/gdrive', force_remount=True)"]},{"cell_type":"code","source":["# 모델 로드 함수\n","@st.cache_resource\n","def load_models():\n","    yolo_model = YOLO('/gdrive/MyDrive/Final project/1_Red/5_분석모델링/YOLOv8/best.pt')\n","\n","    skin_models = {}\n","    model_dir = '/gdrive/MyDrive/Final project/1_Red/5_분석모델링/피부진단/model'\n","    for model_file in os.listdir(model_dir):\n","        if model_file.endswith(\"_final_model.keras\") and os.path.isfile(os.path.join(model_dir, model_file)):\n","            model_path = os.path.join(model_dir, model_file)\n","            model = tf.keras.models.load_model(model_path)\n","            model_name = model_file.split(\"_final_model.keras\")[0]\n","            skin_models[model_name] = model\n","\n","    return yolo_model, skin_models\n","\n","# 이미지 전처리 및 예측 함수\n","def predict_skin_condition(cropped_img, models):\n","    results = {}\n","    img = cv2.resize(cropped_img, (224, 224))\n","    img = tf.keras.applications.efficientnet.preprocess_input(img)\n","    img = np.expand_dims(img, axis=0)\n","\n","    for model_name, model in models.items():\n","        prediction = model.predict(img)\n","        if 'classification' in model_name:\n","            results[model_name] = np.argmax(prediction[0])\n","        else:  # regression\n","            results[model_name] = prediction[0][0]\n","\n","    return results\n","\n","# 얼굴 분석 함수\n","def analyze_face(image, yolo_model, skin_models):\n","    results = yolo_model(image)\n","    face_analysis = {}\n","\n","    for r in results:\n","        boxes = r.boxes\n","        for box in boxes:\n","            x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()\n","            class_name = yolo_model.names[int(box.cls)]\n","\n","            cropped_img = image[int(y1):int(y2), int(x1):int(x2)]\n","            if cropped_img.size > 0:\n","                skin_prediction = predict_skin_condition(cropped_img, skin_models)\n","                face_analysis[class_name] = skin_prediction\n","            else:\n","                print(f\"Warning: Empty image generated for {class_name}\")\n","\n","    return face_analysis\n","\n","# 결과 시각화 함수\n","def visualize_skin_analysis(face_analysis):\n","    st.title(\"얼굴 부위별 피부 진단 결과\")\n","\n","    for part, predictions in face_analysis.items():\n","        st.header(f\"{part.upper()}\")\n","\n","        col1, col2 = st.columns(2)\n","\n","        with col1:\n","            for feature, value in predictions.items():\n","                if \"classification\" in feature:\n","                    feature_name = feature.split('_')[1]\n","                    st.subheader(f\"{feature_name}\")\n","                    options = [1, 2, 3, 4, 5]\n","                    selected_value = st.select_slider(\n","                        f\"{feature_name} 등급\",\n","                        options=options,\n","                        value=int(value),\n","                        key=f\"{part}_{feature}\"\n","                    )\n","                    st.write(f\"등급: {selected_value}\")\n","\n","        with col2:\n","            for feature, value in predictions.items():\n","                if \"regression\" in feature:\n","                    feature_name = '_'.join(feature.split('_')[1:-1])\n","                    st.subheader(f\"{feature_name}\")\n","                    if 0 <= value <= 1:\n","                        value *= 100\n","                    elif value > 100:\n","                        value = 100\n","\n","                    fig, ax = plt.subplots(figsize=(4, 0.5))\n","                    ax.barh([0], [value], color='skyblue')\n","                    ax.barh([0], [100], color='lightgray', alpha=0.3)\n","                    ax.set_xlim(0, 100)\n","                    ax.set_yticks([])\n","                    ax.set_xticks([0, 25, 50, 75, 100])\n","                    ax.text(value, 0, f'{value:.1f}%', va='center', ha='left', fontweight='bold')\n","                    st.pyplot(fig)\n","\n","# 메인 함수\n","def main():\n","    st.set_page_config(layout=\"wide\")\n","\n","    # 모델 로드\n","    yolo_model, skin_models = load_models()\n","\n","    uploaded_file = st.file_uploader(\"얼굴 이미지를 업로드하세요\", type=[\"jpg\", \"jpeg\", \"png\"])\n","\n","    if uploaded_file is not None:\n","        image = cv2.imdecode(np.frombuffer(uploaded_file.read(), np.uint8), 1)\n","        st.image(image, caption=\"업로드된 이미지\", use_column_width=True)\n","\n","        if st.button(\"피부 분석 시작\"):\n","            face_analysis = analyze_face(image, yolo_model, skin_models)\n","            visualize_skin_analysis(face_analysis)\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"WQglPihUsdxr"},"execution_count":null,"outputs":[]}]}